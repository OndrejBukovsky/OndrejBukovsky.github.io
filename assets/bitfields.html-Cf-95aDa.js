import{_ as n,c as a,e,o as p}from"./app--aB6QZFT.js";const t={};function l(c,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="bitfields" tabindex="-1"><a class="header-anchor" href="#bitfields"><span>Bitfields</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><h2 id="code-example" tabindex="-1"><a class="header-anchor" href="#code-example"><span>Code example</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bit&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">S</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// will usually occupy 2 bytes:</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b1 <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 1st 3 bits (in 1st byte) are b1</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>    <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// next 2 bits (in 1st byte) are blocked out as unused</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b2 <span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 6 bits for b2 - doesn&#39;t fit into the 1st byte =&gt; starts a 2nd</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b3 <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 2 bits for b3 - next (and final) bits in the 2nd byte</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// usually prints 2</span></span>
<span class="line"> </span>
<span class="line">    S s<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// set distinguishable field values</span></span>
<span class="line">    s<span class="token punctuation">.</span>b1 <span class="token operator">=</span> <span class="token number">0b111</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token punctuation">.</span>b2 <span class="token operator">=</span> <span class="token number">0b101111</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token punctuation">.</span>b3 <span class="token operator">=</span> <span class="token number">0b11</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// show layout of fields in S</span></span>
<span class="line">    <span class="token keyword">auto</span> i <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bit_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span><span class="token keyword">uint16_t</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// usually prints 1110000011110111</span></span>
<span class="line">    <span class="token comment">// breakdown is:  \\_/\\/\\_/\\____/\\/</span></span>
<span class="line">    <span class="token comment">//                 b1 u a   b2  b3</span></span>
<span class="line">    <span class="token comment">// where &quot;u&quot; marks the unused :2 specified in the struct, and</span></span>
<span class="line">    <span class="token comment">// &quot;a&quot; marks compiler-added padding to byte-align the next field.</span></span>
<span class="line">    <span class="token comment">// Byte-alignment is happening because b2&#39;s type is declared unsigned char;</span></span>
<span class="line">    <span class="token comment">// if b2 were declared uint16_t there would be no &quot;a&quot;, b2 would abut &quot;u&quot;.</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> b <span class="token operator">=</span> i<span class="token punctuation">;</span> b<span class="token punctuation">;</span> b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// print LSB-first</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const o=n(t,[["render",l],["__file","bitfields.html.vue"]]),r=JSON.parse('{"path":"/ElectricalEngineering/Programming/C_Cpp/bitfields.html","title":"Bitfields","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Code example","slug":"code-example","link":"#code-example","children":[]}],"git":{},"filePathRelative":"ElectricalEngineering/Programming/C_Cpp/bitfields.md"}');export{o as comp,r as data};
