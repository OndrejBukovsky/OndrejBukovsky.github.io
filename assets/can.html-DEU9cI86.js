import{_ as s,c as n,a as e,b as a,d,e as o,r as f,o as l,f as i}from"./app--aB6QZFT.js";const m="/assets/CAN-bus-frame-with-stuff-bit-and-correct-CRC-C5HH397m.png",c="/assets/CAN_standart_frame-SiV-2_Zm.png",h={},b={class:"table-of-contents"};function u(p,t){const r=f("router-link");return l(),n("div",null,[t[4]||(t[4]=e("h1",{id:"can-bus",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#can-bus"},[e("span",null,"CAN bus")])],-1)),e("nav",b,[e("ul",null,[e("li",null,[a(r,{to:"#overview"},{default:d(()=>t[0]||(t[0]=[i("Overview")])),_:1})]),e("li",null,[a(r,{to:"#frames"},{default:d(()=>t[1]||(t[1]=[i("Frames")])),_:1}),e("ul",null,[e("li",null,[a(r,{to:"#data-frame"},{default:d(()=>t[2]||(t[2]=[i("Data frame")])),_:1})])])]),e("li",null,[a(r,{to:"#mcp2515"},{default:d(()=>t[3]||(t[3]=[i("MCP2515")])),_:1})])])]),t[5]||(t[5]=o('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><h2 id="frames" tabindex="-1"><a class="header-anchor" href="#frames"><span>Frames</span></a></h2><p>A CAN network can be configured to work with two different message (or &quot;frame&quot;) formats: the standard or base frame format (described in CAN 2.0 A and CAN 2.0 B), and the extended frame format (described only by CAN 2.0 B). The only difference between the two formats is that the &quot;CAN base frame&quot; supports a length of 11 bits for the identifier, and the &quot;CAN extended frame&quot; supports a length of 29 bits for the identifier, made up of the 11-bit identifier (&quot;base identifier&quot;) and an 18-bit extension (&quot;identifier extension&quot;). The distinction between CAN base frame format and CAN extended frame format is made by using the IDE bit, which is transmitted as dominant in case of an 11-bit frame, and transmitted as recessive in case of a 29-bit frame. CAN controllers that support extended frame format messages are also able to send and receive messages in CAN base frame format. All frames begin with a start-of-frame (SOF) bit that denotes the start of the frame transmission.</p><p>CAN has four frame types:</p><ul><li>Data frame: a frame containing node data for transmission</li><li>Remote frame: a frame requesting the transmission of a specific identifier</li><li>Error frame: a frame transmitted by any node detecting an error</li><li>Overload frame: a frame to inject a delay between data or remote frame</li></ul><h3 id="data-frame" tabindex="-1"><a class="header-anchor" href="#data-frame"><span>Data frame</span></a></h3><p>The data frame is the only frame for actual data transmission. There are two message formats:</p><ul><li>Base frame format: with 11 identifier bits</li><li>Extended frame format: with 29 identifier bits</li></ul><h4 id="base-frame-format" tabindex="-1"><a class="header-anchor" href="#base-frame-format"><span>Base frame format</span></a></h4><div align="center"><img src="'+m+'" alt="can frame" width="80%" height="280"><p>A complete CAN bus frame, including stuff bits, a correct CRC, and inter-frame spacing.</p></div><table class="wikitable"><tbody><tr><th>Field name</th><th>Length (bits)</th><th>Purpose </th></tr><tr><td>Start-of-frame</td><td>1</td><td>Denotes the start of frame transmission </td></tr><tr><td bgcolor="lime">Identifier (green)</td><td>11</td><td>A (unique) identifier which also represents the message priority </td></tr><tr><td bgcolor="mediumslateblue">Stuff bit</td><td>1</td><td>A bit of the opposite polarity to maintain synchronisation; see <a href="/wiki/Bit_stuffing" title="Bit stuffing">Bit stuffing</a>, below </td></tr><tr><td bgcolor="cyan">Remote transmission request (RTR) (blue)</td><td>1</td><td>Must be dominant (0) for data frames and recessive (1) for remote request frames (see <a href="#Remote_frame">Remote Frame</a>, below) </td></tr><tr><td>Identifier extension bit (IDE)</td><td>1</td><td>Must be dominant (0) for base frame format with 11-bit identifiers </td></tr><tr><td>Reserved bit (r0)</td><td>1</td><td>Reserved bit. Must be dominant (0), but accepted as either dominant or recessive. </td></tr><tr><td bgcolor="yellow">Data length code (DLC) (yellow)</td><td>4</td><td>Number of bytes of data (0–8 bytes)<sup id="cite_ref-16" class="reference"><a href="#cite_note-16">[a]</a></sup></td></tr><tr><td bgcolor="red">Data field (red)</td><td>0–64 (0-8 bytes)</td><td>Data to be transmitted (length in bytes dictated by DLC field) </td></tr><tr><td>CRC</td><td>15</td><td><a href="/wiki/Cyclic_redundancy_check#CRC-15-CAN" title="Cyclic redundancy check">Cyclic redundancy check</a></td></tr><tr><td>CRC delimiter</td><td>1</td><td>Must be recessive (1) </td></tr><tr><td>ACK slot</td><td>1</td><td>Transmitter sends recessive (1) and any receiver can assert a dominant (0) </td></tr><tr><td>ACK delimiter</td><td>1</td><td>Must be recessive (1) </td></tr><tr><td>End-of-frame (EOF)</td><td>7</td><td>Must be recessive (1) </td></tr><tr><td>Inter-frame spacing (IFS)</td><td>3</td><td>Must be recessive (1) </td></tr></tbody></table><h4 id="extended-frame-format" tabindex="-1"><a class="header-anchor" href="#extended-frame-format"><span>Extended frame format</span></a></h4><p>The frame format is as follows on from here in the table below:</p><table class="wikitable"><tbody><tr><th>Field name</th><th>Length (bits)</th><th>Purpose </th></tr><tr><td>Start-of-frame</td><td>1</td><td>Denotes the start of frame transmission </td></tr><tr><td bgcolor="lime">Identifier A (green)</td><td>11</td><td>First part of the (unique) identifier which also represents the message priority </td></tr><tr><td>Substitute remote request (SRR)</td><td>1</td><td>Must be recessive (1) </td></tr><tr><td>Identifier extension bit (IDE)</td><td>1</td><td>Must be recessive (1) for extended frame format with 29-bit identifiers </td></tr><tr><td bgcolor="lime">Identifier B (green)</td><td>18</td><td>Second part of the (unique) identifier which also represents the message priority </td></tr><tr><td bgcolor="cyan">Remote transmission request (RTR) (blue)</td><td>1</td><td>Must be dominant (0) for data frames and recessive (1) for remote request frames (see <a href="#Remote_frame">Remote Frame</a>, below) </td></tr><tr><td>Reserved bits (r1, r0)</td><td>2</td><td>Reserved bits which must be set dominant (0), but accepted as either dominant or recessive </td></tr><tr><td bgcolor="yellow">Data length code (DLC) (yellow)</td><td>4</td><td>Number of bytes of data (0–8 bytes)<sup id="cite_ref-17" class="reference"><a href="#cite_note-17">[a]</a></sup></td></tr><tr><td bgcolor="red">Data field (red)</td><td>0–64 (0-8 bytes)</td><td>Data to be transmitted (length dictated by DLC field) </td></tr><tr><td>CRC</td><td>15</td><td><a href="/wiki/Cyclic_redundancy_check#CRC-15-CAN" title="Cyclic redundancy check">Cyclic redundancy check</a></td></tr><tr><td>CRC delimiter</td><td>1</td><td>Must be recessive (1) </td></tr><tr><td>ACK slot</td><td>1</td><td>Transmitter sends recessive (1) and any receiver can assert a dominant (0) </td></tr><tr><td>ACK delimiter</td><td>1</td><td>Must be recessive (1) </td></tr><tr><td>End-of-frame (EOF)</td><td>7</td><td>Must be recessive (1) </td></tr></tbody></table><h2 id="mcp2515" tabindex="-1"><a class="header-anchor" href="#mcp2515"><span>MCP2515</span></a></h2><div align="center"><img src="'+c+'" width="80%"><p>Captured frame with oscilloscope.</p></div>',16))])}const g=s(h,[["render",u],["__file","can.html.vue"]]),v=JSON.parse('{"path":"/ElectricalEngineering/Communication/CAN/can.html","title":"CAN bus","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Frames","slug":"frames","link":"#frames","children":[{"level":3,"title":"Data frame","slug":"data-frame","link":"#data-frame","children":[]}]},{"level":2,"title":"MCP2515","slug":"mcp2515","link":"#mcp2515","children":[]}],"git":{},"filePathRelative":"ElectricalEngineering/Communication/CAN/can.md"}');export{g as comp,v as data};
